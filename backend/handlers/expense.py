import logging
import calendar

from decimal import Decimal
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from models.database import get_db
from models.expense import Expense
from models.categories import ExpenseCategory
from models.user import User
from keyboards.keyboards import registered_main, get_expense_categories_keyboard, transaction_menu

logger = logging.getLogger(__name__)


class ExpenseStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_category = State()
    waiting_for_date = State()
    waiting_for_description = State()

router = Router()


def get_days_keyboard():
    today = datetime.today()
    current_month = today.month
    current_year = today.year
    days_in_month = calendar.monthrange(current_year, current_month)[1]
    days = [str(day) for day in range(1, days_in_month + 1)]

    buttons = []
    row = []
    for day in days:
        row.append(InlineKeyboardButton(text=day, callback_data=f"expense_day_{day}"))
        if len(row) == 3:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def start_add_expense(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=transaction_menu)
    await state.set_state(ExpenseStates.waiting_for_amount)


@router.message(ExpenseStates.waiting_for_amount)
async def process_expense_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)

        db = next(get_db())
        categories_keyboard = get_expense_categories_keyboard(db)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=categories_keyboard)
        await state.set_state(ExpenseStates.waiting_for_category)
    except ValueError:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


@router.callback_query(lambda c: c.data.startswith('expense_category_'))
async def process_expense_category_callback(callback_query: CallbackQuery, state: FSMContext):
    db = next(get_db())
    category_data = callback_query.data.split('_')[2]

    if not category_data.isdigit():
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_data}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    category_id = int(category_data)
    category = db.query(ExpenseCategory).filter(ExpenseCategory.id == category_id).first()

    if not category:
        logger.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback_query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    user = db.query(User).filter(User.tg_id == callback_query.from_user.id).first()
    if not user:
        logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await callback_query.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    await state.update_data(category_id=category.id)
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞: {category.name}")
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:", reply_markup=get_days_keyboard())
    await state.set_state(ExpenseStates.waiting_for_date)


@router.callback_query(lambda c: c.data.startswith('expense_day_'))
async def process_day_callback(callback_query: CallbackQuery, state: FSMContext):
    try:
        day = int(callback_query.data.split('_')[2])
        today = datetime.today()
        expense_date = today.replace(day=day).date()

        await state.update_data(date=expense_date)
        await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {day} —á–∏—Å–ª–æ.")
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û–ø–ª–∞—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞'):")
        await state.set_state(ExpenseStates.waiting_for_description)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è: {e}")
        await callback_query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞.")


@router.message(ExpenseStates.waiting_for_date)
async def process_manual_date_input(message: Message, state: FSMContext):
    try:
        expense_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        today = datetime.today()

        if expense_date.month != today.month or expense_date.year != today.year:
            await message.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É.")
            return

        await state.update_data(date=expense_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫—É–ø–∫–∞ –µ–¥—ã):")
        await state.set_state(ExpenseStates.waiting_for_description)
    except ValueError:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")


@router.message(ExpenseStates.waiting_for_description)
async def process_expense_description(message: Message, state: FSMContext):
    try:
        description = message.text
        await state.update_data(description=description)

        data = await state.get_data()
        amount = data.get("amount")
        category_id = data.get("category_id")
        expense_date = data.get("date", datetime.today().date())

        if not amount or not category_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—É–º–º–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        db = next(get_db())
        category = db.query(ExpenseCategory).filter(ExpenseCategory.id == category_id).first()

        if not category:
            logger.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await message.answer("‚ùå –û—à–∏–±–∫–∞. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        user = db.query(User).filter(User.tg_id == message.from_user.id).first()
        if not user:
            logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        new_expense = Expense(user_id=user.id, category_id=category.id, amount=amount, date=expense_date, description=description)
        db.add(new_expense)
        user.balance -= Decimal(amount)
        db.commit()

        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: {amount} ‚ÇΩ, {category.name}, {expense_date}, {description}")
        await message.answer(f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω! –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}, –î–∞—Ç–∞: {expense_date}")
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=registered_main)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(lambda c: c.data == "back")
async def back_to_main_menu(callback_query: CallbackQuery):
    await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=registered_main)
    await callback_query.message.delete()

@router.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_expense(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=registered_main)