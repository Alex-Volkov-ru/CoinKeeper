import logging

from datetime import datetime, timedelta
from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from utils.db_operations import get_daily_income, get_weekly_income, get_monthly_income, get_income_in_date_range
from utils.db_operations import get_daily_expenses, get_weekly_expenses, get_monthly_expenses, get_expenses_in_date_range
from models.database import get_db
from models.user import User

logger = logging.getLogger(__name__)

router = Router()
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ—Ö–æ–¥—ã –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã)
user_context = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_from_db(db, tg_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ Telegram ID.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param tg_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    return db.query(User).filter(User.tg_id == tg_id).first()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.message(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics_menu(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–æ—Ö–æ–¥—ã –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã).

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    stats_inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Ö–æ–¥–∞–º", callback_data="income_stats")],
            [InlineKeyboardButton(text="üí∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º", callback_data="expenses_stats")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=stats_inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Ö–æ–¥–∞–º"
@router.callback_query(lambda c: c.data == "income_stats")
async def show_income_stats_menu(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Ö–æ–¥–∞–º". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–æ—Ö–æ–¥–∞–º.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    income_stats_inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –î–æ—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å", callback_data="daily_income")],
            [InlineKeyboardButton(text="üìÖ –î–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="weekly_income")],
            [InlineKeyboardButton(text="üìÜ –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü", callback_data="monthly_income")],
            [InlineKeyboardButton(text="üîé –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º (—Å –∏ –ø–æ)", callback_data="date_filter_income")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –¥–æ—Ö–æ–¥–∞–º:", reply_markup=income_stats_inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º"
@router.callback_query(lambda c: c.data == "expenses_stats")
async def show_expenses_stats_menu(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    expenses_stats_inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å", callback_data="daily_expenses")],
            [InlineKeyboardButton(text="üìÖ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="weekly_expenses")],
            [InlineKeyboardButton(text="üìÜ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü", callback_data="monthly_expenses")],
            [InlineKeyboardButton(text="üîé –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º (—Å –∏ –ø–æ)", callback_data="date_filter_expenses")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º:", reply_markup=expenses_stats_inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
@router.callback_query(lambda c: c.data == "daily_income")
async def show_daily_income(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    db = next(get_db())
    user = get_user_from_db(db, callback_query.from_user.id)
    if user:
        today = datetime.today().date()
        daily_income = get_daily_income(user.id, db)
        await callback_query.message.answer(f"üìÖ –î–æ—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å ({today.strftime('%d.%m.%Y')}): \n{daily_income} ‚ÇΩ")
    else:
        await callback_query.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
@router.callback_query(lambda c: c.data == "weekly_income")
async def show_weekly_income(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    db = next(get_db())
    user = get_user_from_db(db, callback_query.from_user.id)
    if user:
        today = datetime.today().date()
        start_of_week = today - timedelta(days=today.weekday())  # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏
        end_of_week = start_of_week + timedelta(days=6)  # –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏
        weekly_income = get_weekly_income(user.id, db)
        await callback_query.message.answer(f"üìÖ –î–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é ({start_of_week.strftime('%d.%m.%Y')} - {end_of_week.strftime('%d.%m.%Y')}): \n{weekly_income} ‚ÇΩ")
    else:
        await callback_query.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
@router.callback_query(lambda c: c.data == "monthly_income")
async def show_monthly_income(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    db = next(get_db())
    user = get_user_from_db(db, callback_query.from_user.id)
    if user:
        today = datetime.today().date()
        start_of_month = today.replace(day=1)  # –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
        # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
        end_of_month = (start_of_month.replace(month=today.month % 12 + 1, day=1) - timedelta(days=1))
        monthly_income = get_monthly_income(user.id, db)
        await callback_query.message.answer(f"üìÜ –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü ({start_of_month.strftime('%d.%m.%Y')} - {end_of_month.strftime('%d.%m.%Y')}): \n{monthly_income} ‚ÇΩ")
    else:
        await callback_query.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
@router.callback_query(lambda c: c.data == "daily_expenses")
async def show_daily_expenses(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    db = next(get_db())
    user = get_user_from_db(db, callback_query.from_user.id)
    if user:
        today = datetime.today().date()
        daily_expenses = get_daily_expenses(user.id, db)
        await callback_query.message.answer(f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å ({today.strftime('%d.%m.%Y')}): \n{daily_expenses} ‚ÇΩ")
    else:
        await callback_query.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
@router.callback_query(lambda c: c.data == "weekly_expenses")
async def show_weekly_expenses(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    db = next(get_db())
    user = get_user_from_db(db, callback_query.from_user.id)
    if user:
        today = datetime.today().date()
        start_of_week = today - timedelta(days=today.weekday())  # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏
        end_of_week = start_of_week + timedelta(days=6)  # –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏
        weekly_expenses = get_weekly_expenses(user.id, db)
        await callback_query.message.answer(f"üìÖ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é ({start_of_week.strftime('%d.%m.%Y')} - {end_of_week.strftime('%d.%m.%Y')}): \n{weekly_expenses} ‚ÇΩ")
    else:
        await callback_query.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
@router.callback_query(lambda c: c.data == "monthly_expenses")
async def show_monthly_expenses(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    db = next(get_db())
    user = get_user_from_db(db, callback_query.from_user.id)
    if user:
        today = datetime.today().date()
        start_of_month = today.replace(day=1)  # –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
        # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
        end_of_month = (start_of_month.replace(month=today.month % 12 + 1, day=1) - timedelta(days=1))
        monthly_expenses = get_monthly_expenses(user.id, db)
        await callback_query.message.answer(f"üìÜ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü ({start_of_month.strftime('%d.%m.%Y')} - {end_of_month.strftime('%d.%m.%Y')}): \n{monthly_expenses} ‚ÇΩ")
    else:
        await callback_query.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º (—Å –∏ –ø–æ)" –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
@router.callback_query(lambda c: c.data == "date_filter_expenses")
async def ask_for_expenses_date_range(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º (—Å –∏ –ø–æ)" –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    user_id = callback_query.from_user.id
    user_context[user_id] = "expenses"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç "—Ä–∞—Å—Ö–æ–¥—ã"
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2023 31.01.2023):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º (—Å –∏ –ø–æ)" –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
@router.callback_query(lambda c: c.data == "date_filter_income")
async def ask_for_income_date_range(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º (—Å –∏ –ø–æ)" –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç.

    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    user_id = callback_query.from_user.id
    user_context[user_id] = "income"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç "–¥–æ—Ö–æ–¥—ã"
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2023 31.01.2023):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì)
@router.message(lambda message: " " in message.text)
async def handle_date_range(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç. –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ—Ö–æ–¥–∞–º –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        user_id = message.from_user.id
        if user_id not in user_context:
            await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º' —Å–Ω–æ–≤–∞.")
            return

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø—Ä–æ–±–µ–ª—É
        date_range = message.text.strip()
        start_date_str, end_date_str = date_range.split()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
        start_date = datetime.strptime(start_date_str.strip(), "%d.%m.%Y").date()
        end_date = datetime.strptime(end_date_str.strip(), "%d.%m.%Y").date()

        db = next(get_db())
        user = get_user_from_db(db, user_id)
        if user:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ—Ö–æ–¥—ã –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã)
            if user_context[user_id] == "income":
                filtered_income = get_income_in_date_range(user.id, start_date, end_date, db)
                await message.answer(f"üí∞ –î–æ—Ö–æ–¥—ã —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}: \n{filtered_income} ‚ÇΩ")
            elif user_context[user_id] == "expenses":
                filtered_expenses = get_expenses_in_date_range(user.id, start_date, end_date, db)
                await message.answer(f"üí∏ –†–∞—Å—Ö–æ–¥—ã —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}: \n{filtered_expenses} ‚ÇΩ")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            del user_context[user_id]
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì.")