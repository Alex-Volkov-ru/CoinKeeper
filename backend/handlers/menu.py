import logging

from aiogram import Router
from aiogram.types import Message

from aiogram import Bot
from aiogram.fsm.context import FSMContext

from models.database import get_db
from models.user import User
from keyboards.keyboards import main, registered_main, transaction_menu
from handlers.register import RegistrationStates


router = Router()

@router.message(lambda message: message.text == "–û –Ω–∞—Å")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º lambda-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞
async def about_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å' —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫"""
    try:
        text = (
            "üìå *CoinkeeperBot* ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏! üí∞\n\n"
            "–ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã "
            "–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –ø—Ä—è–º–æ –≤ *Telegram*. –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã "
            "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥—Ä–æ–º–æ–∑–¥–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤! üìä\n\n"
            "üîπ *–ß—Ç–æ —É–º–µ–µ—Ç CoinkeeperBot?*\n"
            "‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
            "‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∞—Ç–∞–º –∏ –¥–æ—Ö–æ–¥–∞–º.\n"
            "‚úÖ –ü–æ–º–æ–≥–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
            "üìà –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ *–ª–µ–≥–∫–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —É—Å–∏–ª–∏–π*! üöÄ"
        )
        
        await message.answer(text, parse_mode="Markdown")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ about_handler: {str(e)}", exc_info=True)  
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
@router.message(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")  # –§–∏–ª—å—Ç—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
async def start_register(message: Message, state: FSMContext, bot: Bot):
    db = next(get_db())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º tg_id
    user = db.query(User).filter(User.tg_id == message.from_user.id).first()

    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        await bot.send_message(message.from_user.id, f'{user.name}, –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await bot.send_message(message.from_user.id, '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é \n–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
        await state.set_state(RegistrationStates.waiting_for_name)


@router.message(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message, bot: Bot):
    db = next(get_db())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.query(User).filter(User.tg_id == message.from_user.id).first()

    if user:
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        profile_text = (
            f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"üìõ *–ò–º—è:* {user.name}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user.contact}`\n"
            f"üëõ *–ë–∞–ª–∞–Ω—Å:*  `{user.balance} —Ä—É–±–ª–µ–π`\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(
            message.from_user.id, 
            profile_text, 
            parse_mode="Markdown", 
            reply_markup=registered_main
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.send_message(
            message.from_user.id, 
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.", 
            reply_markup=main
        )

@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
async def add_transaction_handler(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'"""
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
    await bot.send_message(
        message.from_user.id, 
        text, 
        reply_markup=transaction_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨Ö –ù–∞–∑–∞–¥"
@router.message(lambda message: message.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, bot: Bot):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await bot.send_message(
        message.from_user.id, 
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
        reply_markup=registered_main
    )